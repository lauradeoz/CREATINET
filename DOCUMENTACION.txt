
# Documentación para Desarrolladores - Proyecto CREATINET

## 1. Arquitectura del Sistema

El proyecto sigue una arquitectura PHP tradicional sin un framework específico, pero con una clara separación de responsabilidades que se asemeja a un patrón Modelo-Vista-Controlador (MVC) simplificado.

-   **Frontend (Vista):** Compuesto por archivos PHP que contienen HTML, junto con CSS para los estilos y JavaScript para la interactividad del cliente. Las vistas principales son `index.php` (portfolio) y `login.php`.
-   **Backend (Controlador y Modelo):**
    -   **Enrutamiento:** No hay un enrutador centralizado. El servidor web (Apache) dirige las peticiones a los archivos `.php` correspondientes. `index.php` actúa como el punto de entrada principal para la aplicación autenticada. La carpeta `/api` maneja peticiones AJAX específicas.
    -   **Lógica de Negocio (Controladores):** Los archivos en la carpeta `controllers` (`portfolioController.php`, `usuarioController.php`) contienen la lógica para manejar las operaciones principales de la aplicación.
    -   **Acceso a Datos (Modelo):** La carpeta `data` contiene clases (`trabajoDB.php`, `ususarioDB.php`) responsables de todas las interacciones con la base de datos, abstrayendo las consultas SQL del resto de la aplicación.
    -   **Configuración:** El archivo `config/database.php` centraliza la configuración de la conexión a la base de datos.

## 2. Diagrama de la Base de Datos

La base de datos, según el archivo `dbs14399138.sql`, consta de las siguientes tablas:

-   **`usuarios`**: Almacena la información de los usuarios registrados.
    -   `id` (INT, PK, AI): Identificador único del usuario.
    -   `nombre_usuario` (VARCHAR): Nombre de usuario para el login.
    -   `email` (VARCHAR): Correo electrónico del usuario.
    -   `password` (VARCHAR): Contraseña hasheada del usuario.
    -   `token_verificacion` (VARCHAR): Token para la verificación de email.
    -   `verificado` (TINYINT): Flag para indicar si el email ha sido verificado.

-   **`trabajos`**: Almacena los proyectos o trabajos subidos por los usuarios.
    -   `id` (INT, PK, AI): Identificador único del trabajo.
    -   `id_usuario` (INT, FK -> usuarios.id): Usuario que subió el trabajo.
    -   `titulo` (VARCHAR): Título del trabajo.
    -   `descripcion` (TEXT): Descripción detallada del trabajo.
    -   `imagen` (VARCHAR): Nombre del archivo de imagen asociado.
    -   `favorito` (INT): Contador de 'likes' o favoritos.
    -   `fecha_creacion` (TIMESTAMP): Fecha de subida del trabajo.

-   **`likes`**: Tabla pivote para registrar qué usuario le ha dado 'like' a qué trabajo.
    -   `id` (INT, PK, AI): Identificador único del like.
    -   `id_usuario` (INT, FK -> usuarios.id): Usuario que dio el like.
    -   `id_trabajo` (INT, FK -> trabajos.id): Trabajo que recibió el like.

-   **`programas`**: Almacena los programas o herramientas de diseño.
    -   `id` (INT, PK, AI): Identificador único del programa.
    -   `nombre` (VARCHAR): Nombre del programa (ej. "Adobe Photoshop").
    -   `logo_url` (VARCHAR): Ruta a la imagen del logo del programa.

-   **`trabajo_programas`**: Tabla pivote para la relación N:M entre trabajos y programas.
    -   `id_trabajo` (INT, FK -> trabajos.id): Identificador del trabajo.
    -   `id_programa` (INT, FK -> programas.id): Identificador del programa usado.

-   **`password_resets`**: Almacena tokens para el reseteo de contraseñas.
    -   `id` (INT, PK, AI): Identificador único.
    -   `email` (VARCHAR): Email del usuario que solicita el reseteo.
    -   `token` (VARCHAR): Token único para el reseteo.
    -   `created_at` (TIMESTAMP): Fecha de creación del token.

## 3. Explicación de las Principales Funciones PHP

-   **`index.php`**: Punto de entrada principal. Verifica la sesión del usuario. Muestra la galería de trabajos propios y de la comunidad. Contiene el formulario para subir nuevos proyectos.
-   **`login.php`**: Maneja el inicio y registro de sesión de usuarios.
-   **`logout.php`**: Cierra la sesión del usuario.
-   **`config/database.php`**: Define la clase `Database` que gestiona la conexión a la base de datos usando PDO.
-   **`data/ususarioDB.php`**: Clase `UsuarioDB` para gestionar las operaciones CRUD (Crear, Leer, Actualizar, Borrar) de los usuarios.
-   **`data/trabajoDB.php`**: Clase `TrabajoDB` para gestionar las operaciones CRUD de los trabajos.
-   **`controllers/usuarioController.php`**: Contiene la lógica para el registro, login, y verificación de usuarios.
-   **`controllers/portfolioController.php`**: Contiene la lógica para mostrar, crear, editar y eliminar trabajos del portfolio.
-   **`api/like_handler.php`**: Endpoint de la API que gestiona los 'likes' de un trabajo, interactuando con `trabajoDB`.
-   **`api/delete_trabajo.php`**: Endpoint de la API para eliminar un trabajo.

## 4. Descripción de la Estructura de Archivos

```
/
├── api/                # Endpoints para peticiones asíncronas (AJAX)
│   ├── delete_trabajo.php
│   ├── like_handler.php
│   └── ...
├── config/             # Archivos de configuración
│   └── database.php
├── controllers/        # Lógica de negocio de la aplicación
│   ├── portfolioController.php
│   └── usuarioController.php
├── css/                # Hojas de estilo
│   ├── estilos.css
│   └── login.css
├── data/               # Clases de acceso a datos (Modelo)
│   ├── trabajoDB.php
│   ├── ususarioDB.php
│   └── PHPMailer/      # Librería externa para envío de correos
├── img/                # Recursos de imágenes
│   ├── LOGOS/          # Logos de programas de diseño
│   └── trabajos/       # Imágenes de los proyectos subidos por usuarios
├── js/                 # Archivos JavaScript para interactividad
│   ├── portfolio.js
│   └── login.js
├── .htaccess           # Reglas de configuración de Apache
├── index.php           # Página principal y de portfolio
├── login.php           # Página de inicio de sesión y registro
└── dbs14399138.sql     # Script SQL para la creación de la base de datos
```

## 5. Requisitos del Sistema y Dependencias

-   **Servidor Web:** Apache 2.4 o superior.
-   **PHP:** Versión 7.4 o superior.
    -   Extensión PDO y pdo_mysql habilitadas.
-   **Base de Datos:** MySQL 5.7+ o MariaDB 10.2+.
-   **Dependencias Externas:**
    -   **PHPMailer:** Incluida en la carpeta `data/PHPMailer/`. Se utiliza para el envío de correos de verificación y reseteo de contraseña.

## 6. Guía de Instalación y Configuración

1.  **Clonar/Descargar el Proyecto:** Coloca todos los archivos del proyecto en el directorio raíz de tu servidor web local (ej. `C:/xampp/htdocs/CREATINET`).

2.  **Crear la Base de Datos:**
    -   Abre una herramienta de gestión de bases de datos como phpMyAdmin.
    -   Crea una nueva base de datos. Se recomienda el nombre `creatinet_db`.
    -   Selecciona la base de datos recién creada y ve a la pestaña "Importar".
    -   Importa el archivo `dbs14399138.sql` para crear todas las tablas necesarias.

3.  **Configurar la Conexión:**
    -   Abre el archivo `config/database.php`.
    -   Modifica las siguientes variables con tus credenciales de base de datos:
        ```php
        private $host = 'localhost';
        private $db_name = 'creatinet_db'; // O el nombre que hayas elegido
        private $username = 'root'; // Tu usuario de MySQL
        private $password = ''; // Tu contraseña de MySQL
        ```

4.  **Iniciar el Servidor:** Asegúrate de que tu servidor Apache y MySQL estén en funcionamiento a través del panel de control de XAMPP/WAMP.

5.  **Acceder a la Aplicación:**

    -   **Entorno Local:** Abre tu navegador web y navega a `http://localhost/CREATINET/`. Deberías ver la página de inicio de sesión.
    -   **Entorno de Producción:** La aplicación también está disponible en vivo en [http://www.alumnalaura.com](http://www.alumnalaura.com).

¡La instalación está completa! Ya puedes registrar un nuevo usuario y empezar a usar la aplicación.

¡La instalación está completa! Ya puedes registrar un nuevo usuario y empezar a usar la aplicación.
